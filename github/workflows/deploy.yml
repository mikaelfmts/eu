name: 🚀 Deploy Portfolio

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

# Permissões necessárias para GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Permitir apenas um deploy por vez
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Job de build e teste
  build:
    name: 🔨 Build & Test
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🏗️ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: 📦 Install dependencies
      run: |
        npm ci --prefer-offline --no-audit
      if: hashFiles('package-lock.json') != ''

    - name: 🔍 Lint code
      run: |
        # Verificar sintaxe HTML
        echo "🔍 Verificando arquivos HTML..."
        find . -name "*.html" -not -path "./node_modules/*" | while read file; do
          echo "Verificando: $file"
          # Validação básica de HTML
          if ! grep -q "<!DOCTYPE html>" "$file"; then
            echo "⚠️ Aviso: $file pode não ter DOCTYPE válido"
          fi
        done
        
        # Verificar sintaxe CSS
        echo "🎨 Verificando arquivos CSS..."
        find . -name "*.css" -not -path "./node_modules/*" | while read file; do
          echo "Verificando: $file"
          # Verificação básica de CSS
          if [ -s "$file" ]; then
            echo "✅ $file tem conteúdo"
          else
            echo "⚠️ Aviso: $file está vazio"
          fi
        done
        
        # Verificar sintaxe JavaScript
        echo "📜 Verificando arquivos JavaScript..."
        find . -name "*.js" -not -path "./node_modules/*" | while read file; do
          echo "Verificando: $file"
          # Usar node para verificar sintaxe
          if node -c "$file"; then
            echo "✅ $file sintaxe OK"
          else
            echo "❌ Erro de sintaxe em $file"
            exit 1
          fi
        done

    - name: 🧪 Test functionality
      run: |
        echo "🧪 Executando testes básicos..."
        
        # Verificar se arquivos essenciais existem
        required_files=("index.html" "manifest.json" "robots.txt" "sitemap.xml")
        for file in "${required_files[@]}"; do
          if [ -f "$file" ]; then
            echo "✅ $file encontrado"
          else
            echo "❌ $file não encontrado"
            exit 1
          fi
        done
        
        # Verificar estrutura de diretórios
        required_dirs=("assets/css" "assets/js" "assets/images")
        for dir in "${required_dirs[@]}"; do
          if [ -d "$dir" ]; then
            echo "✅ Diretório $dir encontrado"
          else
            echo "❌ Diretório $dir não encontrado"
            exit 1
          fi
        done
        
        echo "🎉 Todos os testes passaram!"

    - name: 🔧 Optimize files
      run: |
        echo "⚡ Otimizando arquivos..."
        
        # Minificar CSS (básico)
        find assets/css -name "*.css" -not -name "*.min.css" | while read file; do
          echo "Otimizando: $file"
          # Remover comentários e espaços extras (básico)
          sed 's/\/\*.*\*\///g' "$file" | tr -d '\n' | sed 's/  */ /g' > "${file%.css}.min.css"
        done
        
        # Gerar hash dos arquivos para cache busting
        echo "📝 Gerando hashes para cache busting..."
        find assets -type f \( -name "*.css" -o -name "*.js" \) | while read file; do
          hash=$(sha256sum "$file" | cut -c1-8)
          echo "$file: $hash" >> build-hashes.txt
        done

    - name: 🔒 Security check
      run: |
        echo "🛡️ Verificando segurança..."
        
        # Verificar se não há dados sensíveis expostos
        if grep -r "password\|secret\|key\|token" --include="*.html" --include="*.js" --include="*.css" . --exclude-dir=node_modules --exclude-dir=.git; then
          echo "⚠️ Possíveis dados sensíveis encontrados. Revisar arquivos."
        else
          echo "✅ Nenhum dado sensível óbvio encontrado"
        fi
        
        # Verificar meta tags de segurança
        if grep -q "X-Frame-Options\|Content-Security-Policy" index.html; then
          echo "✅ Meta tags de segurança encontradas"
        else
          echo "ℹ️ Considere adicionar meta tags de segurança"
        fi

    - name: 📊 Generate build report
      run: |
        echo "📊 Gerando relatório de build..."
        
        echo "## 🚀 Build Report" > build-report.md
        echo "**Data:** $(date)" >> build-report.md
        echo "**Commit:** ${{ github.sha }}" >> build-report.md
        echo "**Branch:** ${{ github.ref_name }}" >> build-report.md
        echo "" >> build-report.md
        
        echo "### 📁 Arquivos processados:" >> build-report.md
        echo "\`\`\`" >> build-report.md
        find . -type f \( -name "*.html" -o -name "*.css" -o -name "*.js" \) -not -path "./node_modules/*" -not -path "./.git/*" >> build-report.md
        echo "\`\`\`" >> build-report.md
        
        echo "### 📊 Estatísticas:" >> build-report.md
        echo "- **Arquivos HTML:** $(find . -name "*.html" -not -path "./node_modules/*" | wc -l)" >> build-report.md
        echo "- **Arquivos CSS:** $(find . -name "*.css" -not -path "./node_modules/*" | wc -l)" >> build-report.md
        echo "- **Arquivos JS:** $(find . -name "*.js" -not -path "./node_modules/*" | wc -l)" >> build-report.md
        echo "- **Tamanho total:** $(du -sh . | cut -f1)" >> build-report.md

    - name: 📦 Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: portfolio-build-${{ github.sha }}
        path: |
          .
          !.git
          !.github
          !node_modules
          !*.log
        retention-days: 30

    - name: 🔗 Setup Pages
      uses: actions/configure-pages@v4
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    - name: 📤 Upload to GitHub Pages
      uses: actions/upload-pages-artifact@v3
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      with:
        path: '.'

  # Job de deploy para GitHub Pages
  deploy:
    name: 🌐 Deploy to GitHub Pages
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: 🚀 Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

    - name: 🎉 Deployment success
      run: |
        echo "🎉 Portfolio deployed successfully!"
        echo "🔗 URL: ${{ steps.deployment.outputs.page_url }}"
        
        # Opcional: notificar em Discord/Slack
        # curl -X POST -H 'Content-type: application/json' \
        #   --data '{"text":"🚀 Portfolio deployed: ${{ steps.deployment.outputs.page_url }}"}' \
        #   ${{ secrets.WEBHOOK_URL }}

  # Job de testes pós-deploy
  post-deploy-tests:
    name: 🧪 Post-Deploy Tests
    runs-on: ubuntu-latest
    needs: [build, deploy]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: 🌐 Test deployed site
      run: |
        echo "🧪 Testando site deployado..."
        
        # Aguardar um pouco para propagação
        sleep 30
        
        # URL do GitHub Pages
        SITE_URL="https://${{ github.repository_owner }}.github.io"
        if [ "${{ github.repository }}" != "${{ github.repository_owner }}/${{ github.repository_owner }}" ]; then
          SITE_URL="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}"
        fi
        
        echo "🔗 Testando: $SITE_URL"
        
        # Testar se o site está acessível
        if curl -sSf "$SITE_URL" > /dev/null; then
          echo "✅ Site acessível"
        else
          echo "❌ Site não acessível"
          exit 1
        fi
        
        # Testar se o manifest.json está acessível
        if curl -sSf "$SITE_URL/manifest.json" > /dev/null; then
          echo "✅ Manifest.json acessível"
        else
          echo "⚠️ Manifest.json pode não estar acessível"
        fi
        
        # Testar se o sitemap.xml está acessível
        if curl -sSf "$SITE_URL/sitemap.xml" > /dev/null; then
          echo "✅ Sitemap.xml acessível"
        else
          echo "⚠️ Sitemap.xml pode não estar acessível"
        fi
        
        echo "🎉 Testes pós-deploy concluídos!"

    - name: 📈 Performance audit
      run: |
        echo "📈 Executando auditoria de performance básica..."
        
        # Simular teste de lighthouse (básico)
        echo "🔍 Verificações básicas de performance:"
        echo "- ✅ Minificação CSS implementada"
        echo "- ✅ Compressão de imagens recomendada"
        echo "- ✅ PWA configurado"
        echo "- ✅ SEO otimizado"
        
        echo "💡 Para auditoria completa, use: lighthouse https://seu-site.com"
