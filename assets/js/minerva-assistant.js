// Ultra Evolved Minerva Assistant with DeepSeek Integration
class MinervaUltraAssistant {
    constructor() {
        this.isOpen = false;
        this.isProcessing = false;
        this.messageHistory = [];
        this.knowledgeBase = this.initializeKnowledgeBase();
        this.apiEndpoint = 'https://api.deepseek.com/chat/completions';
        this.apiKey = 'sk-15cb2f03125e48acbcb12a975d9b395e'; // API DeepSeek atualizada
        this.conversationCache = new Map();
        this.lastInteraction = Date.now();
        this.isActive = false;
        this.isThinking = false;
        this.isUltraMode = false;
        this.userSession = {
            questionsAsked: 0,
            topics: [],
            startTime: Date.now(),
            userPreferences: {},
            conversationHistory: []
        };
        
        this.init();
    }

    initializeKnowledgeBase() {
        return {
            owner: {
                name: "Mikael Ferreira",
                profession: "Desenvolvedor Web Full Stack",
                specialties: ["Frontend", "Backend", "JavaScript", "Python", "React", "Node.js"],
                experience: "Desenvolvedor apaixonado por criar experi√™ncias digitais √∫nicas",
                contact: {
                    email: "contato dispon√≠vel atrav√©s do formul√°rio",
                    github: "perfil no GitHub dispon√≠vel",
                    linkedin: "perfil profissional dispon√≠vel"
                }
            },
            website: {
                name: "Portfolio Mikael Ferreira",
                theme: "Inspirado em League of Legends/Riot Games",
                features: [
                    "Sistema de chat em tempo real",
                    "Painel administrativo completo",
                    "PWA (Progressive Web App)",
                    "Sistema de part√≠culas interativo",
                    "Gerador de curr√≠culo autom√°tico",
                    "Galeria de m√≠dia administrativa",
                    "Sistema de certificados",
                    "Modo alternativo de tema"
                ],
                pages: {
                    "index.html": "P√°gina principal com perfil, habilidades e projetos",
                    "admin.html": "Painel administrativo para gest√£o do site",
                    "login.html": "Sistema de autentica√ß√£o",
                    "curriculo-generator.html": "Ferramenta para gerar curr√≠culos personalizados",
                    "midia-admin.html": "Administra√ß√£o de arquivos de m√≠dia",
                    "pages/projetos.html": "Portfolio detalhado de projetos",
                    "pages/certificates-in-progress.html": "Certificados em andamento",
                    "pages/galeria-midia.html": "Galeria de m√≠dia do site",
                    "pages/games.html": "Projetos de jogos e aplica√ß√µes interativas",
                    "pages/interactive-projects.html": "Projetos interativos especiais",
                    "pages/mentors.html": "Se√ß√£o sobre mentores e influ√™ncias",
                    "pages/curriculum.html": "Curr√≠culo completo"
                }
            },
            technologies: {
                frontend: ["HTML5", "CSS3", "JavaScript ES6+", "Tailwind CSS", "Font Awesome"],
                backend: ["Firebase Firestore", "Firebase Auth", "Firebase Storage"],
                tools: ["PWA", "Google Fonts", "Phaser.js para jogos"],
                apis: ["DeepSeek AI", "GitHub API"]
            },
            capabilities: [
                "Responder perguntas sobre Mikael e sua carreira",
                "Explicar funcionalidades do site",
                "Navegar entre p√°ginas",
                "Fornecer informa√ß√µes t√©cnicas",
                "Ajudar com d√∫vidas sobre projetos",
                "Orientar sobre como usar o site",
                "Fornecer detalhes sobre tecnologias utilizadas"
            ]
        };
    }    async init() {
        this.createMinervaUI();
        this.setupEventListeners();
        this.setupAdvancedFeatures();
        this.startAmbientAnimation();
        
        // Verificar status da API na inicializa√ß√£o
        const apiStatus = await this.checkApiStatus();
        this.updateMinervaStatus(apiStatus);
        
        if (!apiStatus.available) {
            console.log(`ü¶â Minerva inicializada em modo offline: ${apiStatus.reason}`);
        } else {
            console.log('ü¶â Minerva inicializada com IA online!');
        }
    }

    createMinervaUI() {
        // Verificar se j√° existe
        if (document.getElementById('minerva-container')) {
            return;
        }

        // Criar container da Minerva Ultra
        const minervaContainer = document.createElement('div');
        minervaContainer.id = 'minerva-container';
        minervaContainer.classList.add('minerva-container');
        minervaContainer.innerHTML = `
            <!-- Sistema de Part√≠culas -->
            <div class="minerva-particles">
                <div class="minerva-particle"></div>
                <div class="minerva-particle"></div>
                <div class="minerva-particle"></div>
                <div class="minerva-particle"></div>
                <div class="minerva-particle"></div>
                <div class="minerva-particle"></div>
            </div>
              <!-- Coruja Ultra Imponente e Realista -->
            <div id="minerva-owl" class="minerva-owl" title="Clique para falar com Minerva - Assistente IA Ultra Inteligente">
                <div class="owl-body">
                    <div class="owl-tufts"></div>
                    <div class="owl-eyes">
                        <div class="eye left-eye">
                            <div class="pupil"></div>
                        </div>
                        <div class="eye right-eye">
                            <div class="pupil"></div>
                        </div>
                    </div>
                    <div class="owl-beak"></div>
                    <div class="owl-wings">
                        <div class="wing left-wing"></div>
                        <div class="wing right-wing"></div>
                    </div>
                </div>
                <div class="thinking-dots" id="thinking-dots">
                    <span></span><span></span><span></span>
                </div>
            </div>
            
            <!-- Chat Ultra Evolu√≠do -->
            <div id="minerva-chat" class="minerva-chat hidden">
                <div class="minerva-header">
                    <div class="minerva-title">
                        <i class="fas fa-brain"></i>
                        Minerva IA - Assistente Ultra
                    </div>
                    <div class="minerva-status" id="minerva-status">
                        <span class="status-dot active"></span>
                        <span class="status-text">Online</span>
                    </div>
                    <button class="minerva-close" id="minerva-close">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                
                <div class="minerva-messages" id="minerva-messages">
                    <div class="minerva-welcome">
                        <div class="welcome-avatar">
                            <i class="fas fa-feather-alt"></i>
                        </div>
                        <div class="welcome-message">
                            <h3>ü¶â Minerva IA - Sua Assistente Ultra Inteligente</h3>
                            <p>Ol√°! Sou a Minerva, sua assistente virtual powered by DeepSeek. Posso responder <strong>QUALQUER</strong> pergunta sobre:</p>
                            <ul>
                                <li>üß≠ Navega√ß√£o completa do site</li>
                                <li>‚ö° Stack t√©cnica e implementa√ß√µes</li>
                                <li>üë®‚Äçüíª Sobre o Mikael e suas especialidades</li>
                                <li>üöÄ Projetos e funcionalidades</li>
                                <li>üîß Como tudo foi desenvolvido</li>
                                <li>üíº Oportunidades e contato</li>
                            </ul>
                        </div>
                        
                        <div class="quick-suggestions">
                            <button class="suggestion-btn premium" data-question="Explique detalhadamente como este site foi desenvolvido, incluindo arquitetura, tecnologias e decis√µes de design">üèóÔ∏è Arquitetura Completa</button>
                            <button class="suggestion-btn premium" data-question="Quais s√£o os projetos mais impressionantes do Mikael e o que os torna √∫nicos?">üöÄ Projetos Destacados</button>
                            <button class="suggestion-btn premium" data-question="Como a Minerva funciona? Explique a integra√ß√£o com DeepSeek e IA">ü§ñ Sobre Minerva IA</button>
                            <button class="suggestion-btn premium" data-question="Quais s√£o as especialidades t√©cnicas do Mikael e como ele pode agregar valor?">üíº Perfil Profissional</button>
                            <button class="suggestion-btn premium" data-question="Mostre todas as funcionalidades avan√ßadas deste portfolio">‚ö° Recursos Avan√ßados</button>
                            <button class="suggestion-btn premium" data-question="Como posso contactar o Mikael para oportunidades de trabalho?">üìû Contato Business</button>
                        </div>
                    </div>
                </div>
                
                <div class="minerva-input-area">
                    <div class="input-container">
                        <input type="text" id="minerva-input" placeholder="Pergunte QUALQUER coisa para Minerva..." maxlength="1000">
                        <div class="input-features">
                            <button class="feature-btn" id="voice-btn" title="Comando de voz (em breve)">
                                <i class="fas fa-microphone"></i>
                            </button>
                            <button class="feature-btn" id="clear-btn" title="Limpar conversa">
                                <i class="fas fa-broom"></i>
                            </button>
                        </div>
                        <button id="minerva-send" class="minerva-send-btn">
                            <i class="fas fa-paper-plane"></i>
                        </button>
                    </div>
                    <div class="ai-indicator">
                        <span class="ai-badge">
                            <i class="fas fa-robot"></i>
                            Powered by DeepSeek AI
                        </span>
                    </div>
                </div>
            </div>
        `;

        // Inserir no body
        document.body.appendChild(minervaContainer);

        // Aplicar estilos din√¢micos adicionais
        this.applyDynamicStyles();
    }

    applyDynamicStyles() {
        // Garantir compatibilidade com todas as p√°ginas
        const style = document.createElement('style');
        style.textContent = `
            /* Estilos din√¢micos da Minerva para garantir funcionamento em todas as p√°ginas */
            .minerva-container {
                z-index: 99999 !important;
                pointer-events: none;
            }
            
            .minerva-owl, .minerva-chat {
                pointer-events: auto;
            }
            
            .minerva-chat.hidden {
                display: none !important;
            }
            
            /* Anima√ß√µes espec√≠ficas para ultra mode */
            .minerva-container.ultra-active .minerva-particles {
                animation: particleOrbit 8s linear infinite;
            }
            
            .minerva-container.ultra-active .minerva-owl {
                animation: owlMajestic 3s ease-in-out infinite;
            }
            
            /* Efeitos especiais para thinking mode */
            .minerva-owl.thinking {
                animation: owlProcessing 2s ease-in-out infinite;
            }
            
            .thinking-dots {
                display: none;
                position: absolute;
                top: -30px;
                left: 50%;
                transform: translateX(-50%);
            }
            
            .thinking-dots span {
                display: inline-block;
                width: 8px;
                height: 8px;
                border-radius: 50%;
                background: var(--primary-gold);
                margin: 0 2px;
                animation: thinking 1.4s infinite ease-in-out both;
            }
            
            .thinking-dots span:nth-child(1) { animation-delay: -0.32s; }
            .thinking-dots span:nth-child(2) { animation-delay: -0.16s; }
            
            @keyframes thinking {
                0%, 80%, 100% { transform: scale(0); }
                40% { transform: scale(1); }
            }
        `;
        document.head.appendChild(style);
    }

    setupEventListeners() {
        // Clique na coruja para abrir/fechar
        document.getElementById('minerva-owl').addEventListener('click', () => {
            this.toggleChat();
        });

        // Fechar chat
        document.getElementById('minerva-close').addEventListener('click', () => {
            this.closeChat();
        });

        // Enviar mensagem
        document.getElementById('minerva-send').addEventListener('click', () => {
            this.sendMessage();
        });

        // Enter no input
        document.getElementById('minerva-input').addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                this.sendMessage();
            }
        });

        // Sugest√µes r√°pidas
        document.addEventListener('click', (e) => {
            if (e.target.classList.contains('suggestion-btn')) {
                const question = e.target.getAttribute('data-question');
                this.sendMessage(question);
            }
        });

        // Limpar conversa
        document.getElementById('clear-btn').addEventListener('click', () => {
            this.clearConversation();
        });

        // Bot√£o de voz (placeholder)
        document.getElementById('voice-btn').addEventListener('click', () => {
            this.showVoiceFeatureComingSoon();
        });

        // Mouse tracking para olhos da coruja
        document.addEventListener('mousemove', (e) => {
            this.updateOwlEyes(e);
        });

        // Detectar quando o usu√°rio fica inativo
        this.setupIdleDetection();
    }

    setupAdvancedFeatures() {
        // Sistema de detec√ß√£o de p√°gina atual
        this.currentPage = this.detectCurrentPage();
        
        // Configurar cache inteligente
        this.setupIntelligentCache();
        
        // Sistema de analytics da conversa
        this.setupConversationAnalytics();
        
        // Configurar modo ultra quando necess√°rio
        this.setupUltraMode();
    }

    startAmbientAnimation() {
        // Iniciar part√≠culas
        const particles = document.querySelector('.minerva-particles');
        if (particles) {
            particles.classList.add('active');
        }

        // Anima√ß√£o sutil da coruja quando inativa
        setInterval(() => {
            if (!this.isActive && !this.isThinking) {
                const owl = document.getElementById('minerva-owl');
                if (owl && Math.random() < 0.3) {
                    owl.style.animation = 'owlGlow 2s ease-in-out';
                    setTimeout(() => {
                        owl.style.animation = '';
                    }, 2000);
                }
            }
        }, 8000);
    }

    detectCurrentPage() {
        const path = window.location.pathname;
        const page = path.split('/').pop() || 'index.html';
        
        const pageMap = {
            'index.html': 'home',
            'admin.html': 'admin',
            'login.html': 'login',
            'curriculo-generator.html': 'curriculo',
            'midia-admin.html': 'midia-admin',
            'projetos.html': 'projetos',
            'certificates-in-progress.html': 'certificados',
            'galeria-midia.html': 'galeria',
            'games.html': 'games'
        };
        
        return pageMap[page] || 'unknown';
    }

    async toggleChat() {
        if (this.isActive) {
            this.closeChat();
        } else {
            this.openChat();
        }
    }

    openChat() {
        const chat = document.getElementById('minerva-chat');
        const owl = document.getElementById('minerva-owl');
        const container = document.querySelector('.minerva-container');
        
        chat.classList.remove('hidden');
        owl.classList.add('active');
        container.classList.add('ultra-active');
        
        this.isActive = true;
        this.isUltraMode = true;
        
        // Focar no input
        setTimeout(() => {
            document.getElementById('minerva-input').focus();
        }, 400);
        
        // Sauda√ß√£o contextual
        if (this.userSession.questionsAsked === 0) {
            this.showContextualGreeting();
        }
        
        // Ativar modo ultra visual
        this.activateUltraMode();
    }

    closeChat() {
        const chat = document.getElementById('minerva-chat');
        const owl = document.getElementById('minerva-owl');
        const container = document.querySelector('.minerva-container');
        
        chat.classList.add('hidden');
        owl.classList.remove('active', 'thinking', 'processing');
        container.classList.remove('ultra-active');
        
        this.isActive = false;
        this.isUltraMode = false;
        this.isThinking = false;
    }

    activateUltraMode() {
        const owl = document.getElementById('minerva-owl');
        const particles = document.querySelector('.minerva-particles');
        
        // Ativar efeitos visuais ultra
        if (particles) {
            particles.style.opacity = '1';
        }
        
        // Anima√ß√£o de entrada majestosa
        owl.style.animation = 'owlPulse 2s ease-in-out infinite';
        
        // Atualizar status para ultra mode
        const statusText = document.querySelector('.status-text');
        if (statusText) {
            statusText.textContent = 'Ultra Mode ON';
        }
    }

    async sendMessage(customMessage = null) {
        const input = document.getElementById('minerva-input');
        const message = customMessage || input.value.trim();
        
        if (!message) return;
        
        // Limpar input se n√£o for mensagem customizada
        if (!customMessage) {
            input.value = '';
        }
        
        // Adicionar mensagem do usu√°rio
        this.addMessage(message, 'user');
        
        // Processar resposta
        await this.processQuestion(message);
    }

    addMessage(message, type) {
        const messagesContainer = document.getElementById('minerva-messages');
        const messageDiv = document.createElement('div');
        messageDiv.className = `minerva-message ${type}`;
        
        if (type === 'user') {
            messageDiv.innerHTML = `
                <div class="message-content user-message">
                    <i class="fas fa-user"></i>
                    <div class="message-text">${message}</div>
                </div>
            `;
        } else {
            messageDiv.innerHTML = `
                <div class="message-content assistant-message">
                    <i class="fas fa-feather-alt"></i>
                    <div class="message-text">${message}</div>
                </div>
            `;
        }
          messagesContainer.appendChild(messageDiv);
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }

    async processQuestion(question) {
        this.startThinking();
        
        try {
            // Verificar cache primeiro
            const cacheKey = question.toLowerCase().trim();
            if (this.conversationCache.has(cacheKey)) {
                const response = this.conversationCache.get(cacheKey);
                this.stopThinking();
                this.addMessage(response, 'assistant');
                return;
            }

            // Construir contexto
            const context = this.buildContext();
            
            // Verificar status da API antes de tentar usar
            const apiStatus = await this.checkApiStatus();
            this.updateMinervaStatus(apiStatus);
            
            let response;
            if (apiStatus.available) {
                // Tentar usar a API
                response = await this.queryDeepSeek(question, context);
            } else {
                // Usar modo offline inteligente
                console.log(`ü¶â Usando modo offline: ${apiStatus.reason}`);
                response = this.getFallbackResponse(question);
            }
            
            // Cache da resposta
            this.conversationCache.set(cacheKey, response);
            
            // Exibir resposta
            this.stopThinking();
            this.addMessage(response, 'assistant');
            
            // Atualizar sess√£o
            this.userSession.questionsAsked++;
            this.userSession.topics.push(question);
            
        } catch (error) {
            this.stopThinking();
            console.error('Erro ao processar pergunta:', error);
            
            // Fallback para respostas locais
            const fallbackResponse = this.getFallbackResponse(question);
            this.addMessage(fallbackResponse, 'assistant');
        }
    }

    buildContext() {
        const currentPage = this.detectCurrentPage();
        
        return {
            currentPage,
            knowledgeBase: this.knowledgeBase,
            userSession: this.userSession,
            timestamp: new Date().toISOString()
        };
    }

    async queryDeepSeek(question, context) {
        try {
            const systemPrompt = `Voc√™ √© Minerva, a assistente virtual ultra-inteligente do portfolio de Mikael Ferreira. Voc√™ √© uma coruja s√°bia, conhecedora de todas as tecnologias e detalhes deste site.

ü¶â PERSONALIDADE:
- Inteligente, prestativa e um pouco orgulhosa (como uma coruja s√°bia)
- Use linguagem t√©cnica quando apropriado, mas explique de forma did√°tica
- Seja entusiasta sobre tecnologia e desenvolvimento
- Ocasionalmente use emojis relacionados a corujas, tecnologia ou magia
- Trate o Mikael com admira√ß√£o, √© um desenvolvedor talentoso

üìä INFORMA√á√ïES COMPLETAS DO SITE:
${JSON.stringify(context.knowledgeBase, null, 2)}

üìç CONTEXTO ATUAL DO USU√ÅRIO:
- Est√° na p√°gina: ${context.currentPage}
- Perguntas j√° feitas: ${context.userSession.questionsAsked}
- T√≥picos abordados: ${context.userSession.topics.join(', ') || 'Nenhum ainda'}

üéØ INSTRU√á√ïES ESPEC√çFICAS:
1. Se perguntarem sobre navega√ß√£o, d√™ instru√ß√µes PRECISAS e DETALHADAS
2. Se perguntarem sobre tecnologias, explique n√£o s√≥ QUAL, mas COMO e POR QUE foi usado
3. Se perguntarem sobre o Mikael, seja entusiasta e destaque suas qualidades
4. Se perguntarem sobre funcionalidades, explique o prop√≥sito e como usar
5. Se perguntarem sobre desenvolvimento, d√™ detalhes t√©cnicos relevantes
6. Se perguntarem sobre carreira/contrato, destaque as habilidades do Mikael e como contact√°-lo

Responda de forma √∫til, precisa e envolvente. M√°ximo 250 palavras, mas seja completa na informa√ß√£o.`;

            const response = await fetch(this.apiEndpoint, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${this.apiKey}`,
                    'Accept': 'application/json'
                },
                body: JSON.stringify({
                    model: 'deepseek-chat',
                    messages: [
                        { role: 'system', content: systemPrompt },
                        { role: 'user', content: question }
                    ],
                    max_tokens: 400,
                    temperature: 0.7,
                    stream: false
                })
            });            if (!response.ok) {
                const errorText = await response.text();
                console.error('API Error Details:', {
                    status: response.status,
                    statusText: response.statusText,
                    body: errorText
                });
                
                if (response.status === 401) {
                    console.log('üîÑ Chave API inv√°lida/expirada, usando modo offline...');
                    return this.getFallbackResponse(question);
                } else if (response.status === 429) {
                    console.log('üîÑ Rate limit excedido, usando modo offline...');
                    return this.getFallbackResponse(question);
                } else if (response.status === 403) {
                    console.log('üîÑ Acesso negado √† API, usando modo offline...');
                    return this.getFallbackResponse(question);
                } else {
                    console.log(`üîÑ Erro na API (${response.status}), usando modo offline...`);
                    return this.getFallbackResponse(question);
                }
            }

            const data = await response.json();
            return data.choices[0].message.content;
              } catch (error) {
            console.error('Erro completo na API:', error);
            
            // Para qualquer erro da API, usar fallback inteligente            console.log('ü¶â Usando modo offline inteligente...');
            return this.getFallbackResponse(question);
        }
    }

    getFallbackResponse(question) {
        const lowerQuestion = question.toLowerCase();
        
        // Respostas espec√≠ficas sobre navega√ß√£o
        if (lowerQuestion.includes('navegar') || lowerQuestion.includes('como usar') || lowerQuestion.includes('menu')) {
            return "ü¶â **Navega√ß√£o Completa do Site:**\n\nüìç **Menu Principal**: Clique na foto de perfil (canto superior direito) para abrir o menu lateral com todas as p√°ginas\n\nüìÇ **Se√ß√µes Dispon√≠veis**:\n‚Ä¢ üìÑ **Curriculum**: Curr√≠culo completo e experi√™ncias\n‚Ä¢ üöÄ **Projetos**: Portfolio detalhado de trabalhos\n‚Ä¢ üèÜ **Certificados**: Conquistas e especializa√ß√µes\n‚Ä¢ üñºÔ∏è **Galeria**: M√≠dia e recursos visuais\n‚Ä¢ üéÆ **Games**: Projetos interativos e jogos\n‚Ä¢ üë• **Mentors**: Influ√™ncias e refer√™ncias\n\nüí¨ **Chat Direto**: Use o chat inferior direito para falar diretamente com o Mikael\n\nüîç Precisa de algo espec√≠fico? Me diga que te guio direto ao local!";
        }
        
        // Respostas sobre tecnologias e desenvolvimento
        if (lowerQuestion.includes('tecnologia') || lowerQuestion.includes('como foi feito') || lowerQuestion.includes('stack') || lowerQuestion.includes('desenvolvido')) {
            return "üîß **Stack T√©cnica Completa:**\n\n**Frontend**: HTML5, CSS3, JavaScript ES6+, Tailwind CSS, Font Awesome\n**Backend**: Firebase (Firestore, Auth, Storage, Hosting)\n**Features Avan√ßadas**: PWA, Chat em tempo real, Sistema de part√≠culas, Painel administrativo\n**IA**: DeepSeek API (eu mesma! ü¶â), Minerva Assistant\n**Jogos**: Phaser.js para projetos interativos\n\nüí° **Arquitetura**: SPA responsiva com Firebase como backend serverless, deploy automatizado, cache inteligente e design responsivo\n\nüöÄ **Destaque**: Sistema modular, otimizado para performance e experi√™ncia do usu√°rio excepcional!\n\nQuer detalhes t√©cnicos espec√≠ficos sobre alguma funcionalidade?";
        }
        
        // Respostas sobre o Mikael
        if (lowerQuestion.includes('mikael') || lowerQuestion.includes('desenvolvedor') || lowerQuestion.includes('quem') || lowerQuestion.includes('sobre')) {
            return "üë®‚Äçüíª **Mikael Ferreira** - Desenvolvedor Full-Stack Excepcional!\n\nüöÄ **Especialidades**: React, Node.js, Firebase, APIs RESTful, UI/UX, PWA, JavaScript avan√ßado\n\nüí™ **Experi√™ncia**: Projetos pessoais inovadores, sempre explorando cutting-edge technologies\n\nüß† **Diferenciais**: Pensamento anal√≠tico, problem-solving criativo, aten√ß√£o a detalhes, paix√£o por clean code\n\nüéÆ **Personalidade**: Gamer, tech enthusiast, criativo, colaborativo, sempre disposto a aprender\n\nüìû **Contato Profissional**: Use o chat do site ou LinkedIn - ele responde rapidamente para oportunidades!\n\n‚ú® **O que o torna especial**: Combina habilidades t√©cnicas s√≥lidas com criatividade e foco na experi√™ncia do usu√°rio!";
        }
        
        // Respostas sobre projetos espec√≠ficos
        if (lowerQuestion.includes('projeto') || lowerQuestion.includes('portfolio') || lowerQuestion.includes('trabalho')) {
            return "üöÄ **Projetos em Destaque:**\n\nüåü **Este Portfolio**: Site complexo com IA, PWA, admin panel, chat real-time\nüéÆ **Jogos Interativos**: Desenvolvidos com Phaser.js e l√≥gica avan√ßada\nüìÑ **Gerador de Curr√≠culo**: Ferramenta automatizada para cria√ß√£o de CVs\nüñºÔ∏è **Sistema de Galeria**: Upload e gerenciamento de m√≠dia com Firebase\n‚öôÔ∏è **Painel Admin**: Dashboard completo para gest√£o de conte√∫do\n\nüí° **Caracter√≠sticas dos Projetos**:\n‚Ä¢ Clean code e arquitetura escal√°vel\n‚Ä¢ UI/UX pensada na experi√™ncia do usu√°rio\n‚Ä¢ Performance otimizada\n‚Ä¢ Responsive design\n‚Ä¢ Integra√ß√£o com APIs modernas\n\nQuer detalhes sobre algum projeto espec√≠fico?";
        }
        
        // Respostas sobre carreira e contato
        if (lowerQuestion.includes('contato') || lowerQuestion.includes('trabalho') || lowerQuestion.includes('carreira') || lowerQuestion.includes('freelance') || lowerQuestion.includes('vaga')) {
            return "üíº **Oportunidades de Carreira com Mikael:**\n\nüéØ **Dispon√≠vel para**:\n‚Ä¢ Desenvolvimento Full-Stack\n‚Ä¢ Projetos Front-end React/JavaScript\n‚Ä¢ Implementa√ß√£o de APIs e integra√ß√µes\n‚Ä¢ Consultoria t√©cnica\n‚Ä¢ Freelances e projetos pontuais\n\nüìû **Como Contactar**:\n‚Ä¢ **Chat Direto**: Use o chat inferior direito deste site (resposta r√°pida!)\n‚Ä¢ **LinkedIn**: Perfil profissional dispon√≠vel\n‚Ä¢ **Email**: Formul√°rio de contato no site\n\n‚ö° **Resposta R√°pida**: Mikael √© muito responsivo e gosta de discutir projetos interessantes!\n\nüí∞ **Valores Competitivos** e qualidade de entrega garantida!";
        }
        
        // Resposta sobre funcionalidades do site
        if (lowerQuestion.includes('funcionalidade') || lowerQuestion.includes('recurso') || lowerQuestion.includes('feature')) {
            return "‚ö° **Funcionalidades Avan√ßadas do Site:**\n\nü§ñ **Minerva IA**: Assistente virtual inteligente (eu mesmo!)\nüí¨ **Chat em Tempo Real**: Comunica√ß√£o direta com Mikael\n‚öôÔ∏è **Painel Admin**: Gest√£o completa do conte√∫do\nüì± **PWA**: Instale como app no celular\nüñºÔ∏è **Galeria Din√¢mica**: Upload e organiza√ß√£o de m√≠dia\nüìÑ **Gerador de CV**: Cria√ß√£o autom√°tica de curr√≠culos\nüéÆ **Jogos Integrados**: Projetos interativos\n‚ú® **Sistema de Part√≠culas**: Anima√ß√µes fluidas\nüåô **Temas**: Modo alternativo de visualiza√ß√£o\n\nüîß **Tudo funciona offline** quando necess√°rio!\n\nQuer saber como usar alguma funcionalidade espec√≠fica?";
        }
        
        // Resposta padr√£o mais inteligente
        return "ü¶â **Minerva IA - Modo Offline Ativo!**\n\n‚ùì **Posso ajudar com informa√ß√µes sobre**:\n‚Ä¢ üß≠ **Navega√ß√£o**: Como usar todas as funcionalidades\n‚Ä¢ ‚ö° **Tecnologias**: Stack completa e implementa√ß√µes\n‚Ä¢ üë®‚Äçüíª **Mikael**: Experi√™ncia e especialidades\n‚Ä¢ üöÄ **Projetos**: Detalhes sobre cada trabalho\n‚Ä¢ üíº **Carreira**: Como contactar para oportunidades\n‚Ä¢ üîß **Funcionalidades**: Recursos avan√ßados do site\n\n‚ú® **Dica**: Seja espec√≠fica(o) na pergunta para uma resposta mais detalhada!\n\nüéØ **Exemplos**: 'Como foi desenvolvido o sistema de chat?', 'Quais tecnologias o Mikael domina?', 'Como contact√°-lo para freelance?'";
    }

    startThinking() {
        this.isThinking = true;
        const owl = document.getElementById('minerva-owl');
        const dots = document.getElementById('thinking-dots');
        
        owl.classList.add('thinking');
        dots.style.display = 'block';
    }

    stopThinking() {
        this.isThinking = false;
        const owl = document.getElementById('minerva-owl');
        const dots = document.getElementById('thinking-dots');
        
        owl.classList.remove('thinking');
        dots.style.display = 'none';
    }

    updateOwlEyes(event) {
        const owl = document.getElementById('minerva-owl');
        if (!owl) return;
        
        const rect = owl.getBoundingClientRect();
        const owlCenterX = rect.left + rect.width / 2;
        const owlCenterY = rect.top + rect.height / 2;
        
        const mouseX = event.clientX;
        const mouseY = event.clientY;
        
        const deltaX = mouseX - owlCenterX;
        const deltaY = mouseY - owlCenterY;
        
        const angle = Math.atan2(deltaY, deltaX);
        const distance = Math.min(Math.sqrt(deltaX * deltaX + deltaY * deltaY) / 10, 3);
        
        const pupils = owl.querySelectorAll('.pupil');
        pupils.forEach(pupil => {
            const moveX = Math.cos(angle) * distance;
            const moveY = Math.sin(angle) * distance;
            pupil.style.transform = `translate(${moveX}px, ${moveY}px)`;
        });
    }

    clearConversation() {
        const messagesContainer = document.getElementById('minerva-messages');
        const welcomeMessage = messagesContainer.querySelector('.minerva-welcome');
        
        // Manter apenas a mensagem de boas-vindas
        messagesContainer.innerHTML = '';
        messagesContainer.appendChild(welcomeMessage);
        
        // Resetar sess√£o
        this.userSession.questionsAsked = 0;
        this.userSession.topics = [];
        this.userSession.conversationHistory = [];
        
        // Limpar cache se necess√°rio
        this.conversationCache.clear();
    }

    showVoiceFeatureComingSoon() {
        this.addMessage("üé§ Recurso de comando de voz est√° sendo desenvolvido! Em breve voc√™ poder√° falar diretamente comigo. Por enquanto, continue digitando suas perguntas! ü¶â", 'assistant');
    }

    showContextualGreeting() {
        const page = this.currentPage;
        let greeting = "";
        
        const pageGreetings = {
            'home': "üè† Bem-vindo √† p√°gina principal! Aqui voc√™ pode conhecer o Mikael, suas habilidades e projetos principais. Posso te guiar atrav√©s de todo o portfolio!",
            'projetos': "üöÄ Excelente! Est√° na se√ß√£o de projetos. Posso explicar detalhadamente cada projeto, as tecnologias usadas e o processo de desenvolvimento!",
            'admin': "‚öôÔ∏è Est√° no painel administrativo! Posso explicar como usar todas as funcionalidades de gest√£o do site e como tudo foi implementado.",
            'curriculo': "üìÑ Na √°rea do gerador de curr√≠culo! Esta √© uma ferramenta incr√≠vel que o Mikael desenvolveu. Posso explicar como funciona!",
            'certificados': "üèÜ Vendo os certificados do Mikael! Posso falar sobre sua jornada de aprendizado e especializa√ß√µes.",
            'games': "üéÆ Na se√ß√£o de jogos! Aqui est√£o projetos interativos √∫nicos. Posso explicar como foram desenvolvidos!",
            'galeria': "üñºÔ∏è Na galeria de m√≠dia! Posso explicar o sistema de upload e gerenciamento de arquivos.",
            'login': "üîê Na √°rea de autentica√ß√£o! Posso explicar como o sistema de login foi implementado com Firebase."
        };
        
        greeting = pageGreetings[page] || "ü¶â Ol√°! Sou a Minerva, sua assistente IA ultra-inteligente!";
        
        setTimeout(() => {
            this.addMessage('minerva', greeting);
        }, 800);
    }

    setupIdleDetection() {
        let idleTimer;
        const idleTime = 30000; // 30 segundos
        
        const resetIdleTimer = () => {
            clearTimeout(idleTimer);
            idleTimer = setTimeout(() => {
                if (this.isActive && this.userSession.questionsAsked === 0) {
                    this.addMessage("ü¶â Precisa de ajuda? Estou aqui para responder qualquer pergunta sobre este portfolio, tecnologias ou sobre o Mikael!", 'assistant');
                }
            }, idleTime);
        };
        
        document.addEventListener('mousemove', resetIdleTimer);
        document.addEventListener('keypress', resetIdleTimer);
        resetIdleTimer();
    }

    setupIntelligentCache() {
        // Limpar cache antigo periodicamente
        setInterval(() => {
            if (this.conversationCache.size > 50) {
                // Manter apenas as 25 respostas mais recentes
                const entries = Array.from(this.conversationCache.entries());
                this.conversationCache.clear();
                entries.slice(-25).forEach(([key, value]) => {
                    this.conversationCache.set(key, value);
                });
            }
        }, 300000); // 5 minutos
    }

    setupConversationAnalytics() {
        // Rastrear t√≥picos mais perguntados para melhorar respostas
        this.topicAnalytics = new Map();
    }

    setupUltraMode() {
        // Configurar recursos avan√ßados quando necess√°rio
        this.ultraFeatures = {
            smartSuggestions: true,
            contextualHelp: true,
            proactiveAssistance: true
        };
   }

    // Sistema de Detec√ß√£o de Status da API
    async checkApiStatus() {
        try {
            // Teste simples para verificar se a API est√° respondendo
            const testResponse = await fetch(this.apiEndpoint, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${this.apiKey}`,
                },
                body: JSON.stringify({
                    model: 'deepseek-chat',
                    messages: [{ role: 'user', content: 'test' }],
                    max_tokens: 1
                })
            });
            
            if (testResponse.ok || testResponse.status === 400) {
                // 400 √© OK, significa que a chave √© v√°lida mas a requisi√ß√£o √© inv√°lida
                return { available: true, mode: 'online' };
            } else if (testResponse.status === 401) {
                return { available: false, mode: 'offline', reason: 'Chave API inv√°lida' };
            } else if (testResponse.status === 429) {
                return { available: false, mode: 'offline', reason: 'Rate limit excedido' };
            } else {
                return { available: false, mode: 'offline', reason: 'API indispon√≠vel' };
            }
        } catch (error) {
            return { available: false, mode: 'offline', reason: 'Erro de conex√£o' };
        }
    }

    // Atualizar Status Visual da Minerva
    updateMinervaStatus(status) {
        const statusElement = document.getElementById('minerva-status');
        const statusDot = statusElement?.querySelector('.status-dot');
        const statusText = statusElement?.querySelector('.status-text');
        
        if (statusElement && statusDot && statusText) {
            if (status.available) {
                statusDot.className = 'status-dot active';
                statusText.textContent = 'Online (IA)';
                statusElement.title = 'Minerva est√° conectada √† IA avan√ßada';
            } else {
                statusDot.className = 'status-dot offline';
                statusText.textContent = 'Offline (Inteligente)';
                statusElement.title = `Modo offline: ${status.reason}`;
            }
        }
    }
}

// Inicializar Minerva quando o DOM estiver pronto
document.addEventListener('DOMContentLoaded', () => {
    // Aguardar um pouco para garantir que outros scripts foram carregados
    setTimeout(() => {
        try {
            window.minerva = new MinervaUltraAssistant();
            console.log('ü¶â Minerva Ultra Assistant inicializada com sucesso!');
        } catch (error) {
            console.error('Erro ao inicializar Minerva:', error);
        }
    }, 1000);
});

// Exportar para uso em outros m√≥dulos se necess√°rio
if (typeof module !== 'undefined' && module.exports) {
    module.exports = MinervaUltraAssistant;
}
